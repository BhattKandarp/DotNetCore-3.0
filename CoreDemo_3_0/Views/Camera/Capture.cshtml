
@{
    ViewData["Title"] = "Capture";
   
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>WebcamJS Test Page</title>
    @*<link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />*@

    <style type="text/css">

        body {
            font-family: Helvetica, sans-serif;
        }

        h2, h3 {
            margin-top: 0;
        }

        form {
            margin-top: 15px;
        }

            form > input {
                margin-right: 15px;
            }


        #buttonhide {
            background: transparent;
            border: none !important;
            font-size: 0;
        }
    </style>

    <style type="text/css">
        /* Flipping the video as it was not mirror view */
        video {
            -webkit-transform: scaleX(-1);
            transform: scaleX(-1);
            margin-top: 5px;
        }

        /* Flipping the canvas image as it was not mirror view */
        #canvas {
            -moz-transform: scaleX(-1);
            -o-transform: scaleX(-1);
            -webkit-transform: scaleX(-1);
            transform: scaleX(-1);
            filter: FlipH;
            -ms-filter: "FlipH";
        }
    </style>

</head>
<body class="container">
    <br />
    <div class="col-md-2"></div>
    <div class="col-md-4">
        <div class="panel panel-default">
            <div class="panel-heading">Camera</div>
            <div class="panel-body">
                <button class="btn btn-primary" onclick="stop();gum('user')">Front</button>

                <button class="btn btn-primary" onclick="stop();gum('environment')">Back</button>
                @*<div id="my_camera"></div>*@
                <div id="div"></div>
                <br />
                <video id="video" height="320" autoplay></video>
                <!-- A button for taking snaps -->
                <form>
                    <input type="button" class="btn btn-success" value="Take Snapshot" id="btnCapture">
                </form>

            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">Captured Photo</div>
            <div class="panel-body">
                <div id="results">
                    Your captured image will appear here...
                    <canvas style="border:solid 1px #ddd;background-color:white;" id="canvas" width="475" height="350"></canvas>
                </div>
            </div>
            <br />
            <br />
        </div>
    </div>

    <div class="col-md-2">    </div>
    <!-- First, include the Webcam.js JavaScript Library -->
    <script src="~/webcamjs/webcam.js"></script>
    <!-- Configure a few settings and attach camera -->
    @*<script language="JavaScript">
            Webcam.set({
                width: 320,
                height: 240,
                image_format: 'jpeg',
                jpeg_quality: 90,
                facingMode: "environment"
            });
            Webcam.attach('#video');
        </script>*@

    <!-- Code to handle taking the snapshot and displaying it locally -->
    <script language="JavaScript">
        function take_snapshot() {
            debugger;
            // take snapshot and get image data
            Webcam.snap(function (data_uri) {
                // display results in page
                document.getElementById('results').innerHTML =
                    '<img src="' +
                    data_uri +
                    '"/>';

                Webcam.upload(data_uri,
                    '/Camera/Capture',
                    function (code, text) {

                        alert('Photo Captured');
                    });
            });
        }
    </script>
    <script type="text/javascript">
        debugger;
        var gum = mode =>
            navigator.mediaDevices.getUserMedia({ video: { facingMode: { exact: mode } } })
                .then(stream => (video.srcObject = stream))
                .catch(e => log(e));

        var stop = () => video.srcObject && video.srcObject.getTracks().forEach(t => t.stop());

        var log = msg => div.innerHTML += msg + "<br>";
    </script>
    <script type="text/javascript">
        var video = document.querySelector("#video");

        // Basic settings for the video to get from Webcam
        const constraints = {
            audio: false,
            video: {
                width: 475, height: 475
            }
        };

        // This condition will ask permission to user for Webcam access
        if (navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia(constraints)
                .then(function (stream) {
                    video.srcObject = stream;
                })
                .catch(function (err0r) {
                    console.log("Something went wrong!");
                });
        }

        function stop(e) {
            var stream = video.srcObject;
            var tracks = stream.getTracks();

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];
                track.stop();
            }
            video.srcObject = null;
        }
    </script>

    <script type="text/javascript">
        // Below code to capture image from Video tag (Webcam streaming)
        $("#btnCapture").click(function () {
            debugger;
            var canvas = document.getElementById('canvas');
            var context = canvas.getContext('2d');

            // Capture the image into canvas from Webcam streaming Video element
            context.drawImage(video, 0, 0);
        });

        // Upload image to server - ajax call - with the help of base64 data as a parameter
        $("#btnSave").click(function () {
             debugger;
            // Below new canvas to generate flip/mirron image from existing canvas
            var destinationCanvas = document.createElement("canvas");
            var destCtx = destinationCanvas.getContext('2d');


            destinationCanvas.height = 500;
            destinationCanvas.width = 500;

            destCtx.translate(video.videoWidth, 0);
            destCtx.scale(-1, 1);
            destCtx.drawImage(document.getElementById("canvas"), 0, 0);

            // Get base64 data to send to server for upload
            var imagebase64data = destinationCanvas.toDataURL("image/png");
            imagebase64data = imagebase64data.replace('data:image/png;base64,', '');
            //$.ajax({
            //    type: 'POST',
            //    url: '/Home/UploadWebCamImage',
            //    data: '{ "imageData" : "' + imagebase64data + '" }',
            //    contentType: 'application/json; charset=utf-8',
            //    dataType: 'text',
            //    success: function (out) {
            //        alert('Image uploaded successfully..');
            //    }
            //});
        });
    </script>
</body>
</html>

